"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è Telegram-–±–æ—Ç–∞.
"""
import os
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery

from infrastructure.persistence.database.session import get_session
from infrastructure.persistence.repositories.postgres_character_repository import PostgresCharacterRepository
from infrastructure.persistence.repositories.json_item_repository import JsonItemRepository
from infrastructure.persistence.repositories.json_enemy_repository import JsonEnemyRepository
from infrastructure.persistence.repositories.json_location_repository import JsonLocationRepository

from domain.services.stats_calculator import StatsCalculator
from domain.services.combat_calculator import CombatCalculator
from domain.services.event_generator import EventGenerator
from domain.services.loot_generator import LootGenerator

from application.use_cases.character import CreateCharacterUseCase, GetCharacterStatsUseCase
from application.use_cases.character.travel import TravelUseCase
from application.use_cases.combat.start_combat import StartCombatUseCase
from application.use_cases.combat.perform_attack_use_case import PerformAttackUseCase
from application.use_cases.events.generate_event_use_case import GenerateEventUseCase
from application.dto.character_dto import CreateCharacterRequest, GetCharacterStatsRequest
from application.dto.travel_dto import TravelRequest

from .formatters import format_stats_response, format_attack_response
from .keyboards import get_travel_keyboard

logger = logging.getLogger(__name__)
router = Router()

# –®–ª—è—Ö –¥–æ —ñ–≥—Ä–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
DATA_PATH = os.path.join(os.path.dirname(__file__), '..', '..', 'data')


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
    if not message.from_user:
        logger.warning("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ cmd_start.")
        return
    user_id = message.from_user.id

    with get_session() as session:
        character_repo = PostgresCharacterRepository(session)
        existing = character_repo.get_by_telegram_user_id(user_id)

        if existing:
            await message.answer(
                f"üéÆ –ó –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è–º, {existing.name}!\n\n"
                f"üìä –†—ñ–≤–µ–Ω—å: {existing.level}\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {existing.current_health}/{existing.base_stats.base_health}\n\n"
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥."
            )
            return

        await message.answer(
            "üéÆ –õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ—ó RPG!\n\n"
            "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∞—à–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (3-20 —Å–∏–º–≤–æ–ª—ñ–≤):"
        )


@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /stats."""
    if not message.from_user:
        logger.warning("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ cmd_stats.")
        return
    user_id = message.from_user.id

    with get_session() as session:
        try:
            character_repo = PostgresCharacterRepository(session)
            item_repo = JsonItemRepository(DATA_PATH)
            stats_calculator = StatsCalculator(item_repo)

            use_case = GetCharacterStatsUseCase(character_repo, stats_calculator)
            request = GetCharacterStatsRequest(telegram_user_id=user_id)
            response = use_case.execute(request)

            text = format_stats_response(response)
            await message.answer(text, parse_mode="HTML")

        except ValueError as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


@router.message(Command("explore"))
async def cmd_explore(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /explore."""
    if not message.from_user:
        logger.warning("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ cmd_explore.")
        return
    user_id = message.from_user.id

    with get_session() as session:
        try:
            character_repo = PostgresCharacterRepository(session)
            character = character_repo.get_by_telegram_user_id(user_id)

            if not character:
                await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
                return

            if character.combat_state:
                await message.answer("‚öîÔ∏è –í–∏ –≤–∂–µ –≤ –±–æ—é! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /attack")
                return

            event_generator = EventGenerator()
            location_repo = JsonLocationRepository(DATA_PATH)
            use_case = GenerateEventUseCase(character_repo, location_repo, event_generator)
            from application.use_cases.events.generate_event_use_case import GenerateEventRequest
            request = GenerateEventRequest(character_id=character.id)
            response = use_case.execute(request)

            if response.event_type == "combat":
                enemy_repo = JsonEnemyRepository(DATA_PATH)
                item_repo = JsonItemRepository(DATA_PATH)
                stats_calculator = StatsCalculator(item_repo)
                location_repo = JsonLocationRepository(DATA_PATH) # –ü–æ—Ç—Ä—ñ–±–µ–Ω –¥–ª—è –≤–∏–±–æ—Ä—É –≤–æ—Ä–æ–≥–∞
                start_combat_uc = StartCombatUseCase(
                    character_repo, enemy_repo, stats_calculator, location_repo
                )
                from application.use_cases.combat.start_combat import StartCombatRequest
                combat_response = start_combat_uc.execute(
                    StartCombatRequest(character_id=character.id)
                )
                session.commit()
                await message.answer(
                    f"‚öîÔ∏è <b>–ë–Ü–ô!</b>\n\n"
                    f"{combat_response.message}\n\n"
                    f"üßü –í–æ—Ä–æ–≥: {combat_response.enemy_name}\n"
                    f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è –≤–æ—Ä–æ–≥–∞: {combat_response.enemy_health}\n\n"
                    f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /attack —â–æ–± –∞—Ç–∞–∫—É–≤–∞—Ç–∏!",
                    parse_mode="HTML"
                )
            else:
                await message.answer(
                    f"üîç {response.description}\n\n"
                    f"–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è: /explore"
                )

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_explore: {e}", exc_info=True)
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@router.message(Command("attack"))
async def cmd_attack(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /attack."""
    if not message.from_user:
        logger.warning("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ cmd_attack.")
        return
    user_id = message.from_user.id

    with get_session() as session:
        try:
            character_repo = PostgresCharacterRepository(session)
            character = character_repo.get_by_telegram_user_id(user_id)

            if not character:
                await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
                return

            if not character.combat_state:
                await message.answer(
                    "‚ùå –í–∏ –Ω–µ –≤ –±–æ—é!\n"
                    "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /explore —â–æ–± –∑–Ω–∞–π—Ç–∏ –≤–æ—Ä–æ–≥–∞."
                )
                return

            enemy_repo = JsonEnemyRepository(DATA_PATH)
            item_repo = JsonItemRepository(DATA_PATH)
            stats_calculator = StatsCalculator(item_repo)
            combat_calculator = CombatCalculator()
            loot_generator = LootGenerator()
            use_case = PerformAttackUseCase(
                character_repo,
                enemy_repo,
                stats_calculator,
                combat_calculator,
                loot_generator
            )

            from application.use_cases.combat.perform_attack_use_case import PerformAttackRequest
            request = PerformAttackRequest(character_id=character.id, number_of_attacks=1)
            response = use_case.execute(request)
            session.commit()

            text = format_attack_response(response)
            await message.answer(text, parse_mode="HTML")

        except ValueError as e:
            await message.answer(f"‚ùå {str(e)}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_attack: {e}", exc_info=True)
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@router.message(Command("travel"))
async def cmd_travel(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /travel."""
    if not message.from_user:
        logger.warning("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ cmd_travel.")
        return
    user_id = message.from_user.id

    with get_session() as session:
        try:
            character_repo = PostgresCharacterRepository(session)
            character = character_repo.get_by_telegram_user_id(user_id)

            if not character:
                await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
                return

            if character.combat_state:
                await message.answer("‚öîÔ∏è –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ—Ä–æ–∂—É–≤–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –±–æ—é!")
                return

            location_repo = JsonLocationRepository(DATA_PATH)
            current_location = location_repo.get(character.location_id)

            if not current_location or not current_location.connected_locations:
                await message.answer("üó∫ –ó–≤—ñ–¥—Å–∏ –Ω–µ–º–∞—î –∫—É–¥–∏ –ø–æ–¥–æ—Ä–æ–∂—É–≤–∞—Ç–∏.")
                return

            destinations = [
                loc for loc_id in current_location.connected_locations
                if (loc := location_repo.get(loc_id))
            ]

            if not destinations:
                await message.answer("üó∫ –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –ª–æ–∫–∞—Ü—ñ–π –¥–ª—è –ø–æ–¥–æ—Ä–æ–∂—ñ.")
                return

            keyboard = get_travel_keyboard(destinations)
            await message.answer(
                f"–í–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤: <b>{current_location.name}</b>\n\n"
                f"–ö—É–¥–∏ –±–∞–∂–∞—î—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏—Å—å?",
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_travel: {e}", exc_info=True)
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@router.callback_query(F.data.startswith("travel_to:"))
async def on_travel_callback(callback: CallbackQuery):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥–æ—Ä–æ–∂—ñ."""
    if not callback.from_user:
        return

    user_id = callback.from_user.id
    destination_id = callback.data.split(':')[1]

    with get_session() as session:
        try:
            character_repo = PostgresCharacterRepository(session)
            character = character_repo.get_by_telegram_user_id(user_id)
            if not character:
                await callback.answer("–ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.", show_alert=True)
                return

            location_repo = JsonLocationRepository(DATA_PATH)
            use_case = TravelUseCase(character_repo, location_repo)
            request = TravelRequest(character_id=character.id, destination_id=destination_id)
            response = use_case.execute(request)
            session.commit()

            if response.success:
                await callback.message.edit_text(
                    f"‚úÖ {response.message}\n\n"
                    f"–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ—Å–ª—ñ–¥–∂—É–≤–∞—Ç–∏ –Ω–æ–≤—É –º—ñ—Å—Ü–µ–≤—ñ—Å—Ç—å: /explore"
                )
            else:
                await callback.message.edit_text(f"‚ùå {response.message}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ on_travel_callback: {e}", exc_info=True)
            await callback.answer(f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", show_alert=True)

    await callback.answer()


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
    text = (
        "üéÆ <b>–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:</b>\n\n"
        "üë§ <b>–ü–µ—Ä—Å–æ–Ω–∞–∂:</b>\n"
        "/start - –ü–æ—á–∞—Ç–∏ –≥—Ä—É / –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/stats - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n"
        "/inventory - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä\n\n"

        "üó∫ <b>–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è:</b>\n"
        "/explore - –î–æ—Å–ª—ñ–¥–∂—É–≤–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é\n"
        "/travel - –ü–æ–¥–æ—Ä–æ–∂—É–≤–∞—Ç–∏ –¥–æ —ñ–Ω—à–æ—ó –ª–æ–∫–∞—Ü—ñ—ó\n"
        "/rest - –í—ñ–¥–ø–æ—á–∏—Ç–∏ –≤ –º—ñ—Å—Ç—ñ (–≤—ñ–¥–Ω–æ–≤–ª—é—î –∑–¥–æ—Ä–æ–≤'—è)\n\n"

        "‚öîÔ∏è <b>–ë—ñ–π:</b>\n"
        "/attack - –ê—Ç–∞–∫—É–≤–∞—Ç–∏ –≤–æ—Ä–æ–≥–∞\n"
        "/flee - –í—Ç–µ–∫—Ç–∏ –∑ –±–æ—é\n\n"

        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n"
    )
    await message.answer(text, parse_mode="HTML")


@router.message(Command("inventory"))
async def cmd_inventory(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /inventory - –ø–æ–∫–∞–∑ —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    with get_session() as session:
        try:
            character_repo = PostgresCharacterRepository(session)
            character = character_repo.get_by_telegram_user_id(user_id)

            if not character:
                await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
                return

            if not character.inventory:
                await message.answer("üéí –í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π")
                return

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–µ–¥–º–µ—Ç–∏
            item_repo = JsonItemRepository(DATA_PATH)
            # items = item_repo.get_many_by_ids(character.inventory)

            # –†–∞—Ö—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–∂–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            item_counts = {}
            for item_id in character.inventory:
                item_counts[item_id] = item_counts.get(item_id, 0) + 1

            text = "üéí <b>–í–ê–® –Ü–ù–í–ï–ù–¢–ê–†:</b>\n\n"

            for item_id, count in item_counts.items():
                item = item_repo.get_by_id(item_id)
                if item:
                    emoji = "‚öîÔ∏è" if item.type == "weapon" else "üõ°" if item.type == "armor" else "üß™"
                    text += f"{emoji} {item.name} x{count}\n"
                    text += f"   ‚îî {item.description}\n"

            # –ü–æ–∫–∞–∑—É—î–º–æ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫—É
            text += "\n<b>–ï–ö–Ü–ü–Ü–†–û–í–ê–ù–û:</b>\n"
            equipped_any = False
            for slot, item_id in character.equipped_items.items():
                if item_id:
                    item = item_repo.get_by_id(item_id)
                    if item:
                        text += f"‚Ä¢ {slot}: {item.name}\n"
                        equipped_any = True

            if not equipped_any:
                text += "–ù—ñ—á–æ–≥–æ –Ω–µ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∞–Ω–æ\n"

            await message.answer(text, parse_mode="HTML")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_inventory: {e}", exc_info=True)
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@router.message(Command("rest"))
async def cmd_rest(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /rest - –≤—ñ–¥–ø–æ—á–∏–Ω–æ–∫ –≤ –º—ñ—Å—Ç—ñ"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    with get_session() as session:
        try:
            character_repo = PostgresCharacterRepository(session)
            character = character_repo.get_by_telegram_user_id(user_id)

            if not character:
                await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
                return

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –º—ñ—Å—Ç—ñ
            location_repo = JsonLocationRepository(DATA_PATH)
            location = location_repo.get(character.location_id)

            if not location or location.type != "town":
                await message.answer(
                    "‚ùå –í—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ –º–æ–∂–Ω–∞ —Ç—ñ–ª—å–∫–∏ –≤ –º—ñ—Å—Ç—ñ!\n"
                    "–ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –º—ñ—Å—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /travel"
                )
                return

            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤ –±–æ—é
            if character.combat_state:
                await message.answer("‚öîÔ∏è –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø–æ—á–∏–≤–∞—Ç–∏ –ø—ñ–¥ —á–∞—Å –±–æ—é!")
                return

            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
            item_repo = JsonItemRepository(DATA_PATH)
            stats_calculator = StatsCalculator(item_repo)
            stats = stats_calculator.calculate_total_stats(character)

            # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∑–¥–æ—Ä–æ–≤'—è —Ç–∞ –º–∞–Ω—É
            health_restored = stats.max_health - character.current_health
            mana_restored = stats.max_mana - character.current_mana

            character.current_health = stats.max_health
            character.current_mana = stats.max_mana

            character_repo.save(character)
            session.commit()

            await message.answer(
                f"üò¥ <b>–í–∏ –≤—ñ–¥–ø–æ—á–∏–ª–∏ –≤ —Ç–∞–≤–µ—Ä–Ω—ñ!</b>\n\n"
                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ: +{health_restored}\n"
                f"üíô –ú–∞–Ω–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–∞: +{mana_restored}\n\n"
                f"–í–∏ –≥–æ—Ç–æ–≤—ñ –¥–æ –Ω–æ–≤–∏—Ö –ø—Ä–∏–≥–æ–¥! /explore",
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_rest: {e}", exc_info=True)
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@router.message(Command("flee"))
async def cmd_flee(message: Message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /flee - –≤—Ç–µ—á–∞ –∑ –±–æ—é"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    with get_session() as session:
        try:
            character_repo = PostgresCharacterRepository(session)
            character = character_repo.get_by_telegram_user_id(user_id)

            if not character:
                await message.answer("‚ùå –°–ø–æ—á–∞—Ç–∫—É —Å—Ç–≤–æ—Ä—ñ—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: /start")
                return

            if not character.combat_state:
                await message.answer("‚ùå –í–∏ –Ω–µ –≤ –±–æ—é!")
                return

            # –®–∞–Ω—Å –Ω–∞ –≤—Ç–µ—á—É –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ —Å–ø—Ä–∏—Ç–Ω–æ—Å—Ç—ñ
            import random
            flee_chance = min(0.5 + (character.base_stats.dexterity * 0.02), 0.9)

            if random.random() < flee_chance:
                # –£—Å–ø—ñ—à–Ω–∞ –≤—Ç–µ—á–∞
                character.combat_state = None
                character_repo.save(character)
                session.commit()

                await message.answer(
                    "üèÉ <b>–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤—Ç–µ–∫–ª–∏ –∑ –±–æ—é!</b>\n\n"
                    "–ú–æ–∂–ª–∏–≤–æ –≤–∞—Ä—Ç–æ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º—ñ—Å—Ç–æ —Ç–∞ –≤—ñ–¥–ø–æ—á–∏—Ç–∏? /travel",
                    parse_mode="HTML"
                )
            else:
                # –ù–µ–≤–¥–∞–ª–∞ –≤—Ç–µ—á–∞ - –≤–æ—Ä–æ–≥ –∞—Ç–∞–∫—É—î
                enemy_repo = JsonEnemyRepository(DATA_PATH)
                enemy = enemy_repo.get_by_id(character.combat_state['enemy_id'])

                if enemy:
                    enemy.current_health = character.combat_state['enemy_current_health']

                    item_repo = JsonItemRepository(DATA_PATH)
                    stats_calculator = StatsCalculator(item_repo)
                    combat_calculator = CombatCalculator()

                    player_stats = stats_calculator.calculate_total_stats(character)
                    enemy_stats = enemy.stats

                    # –í–æ—Ä–æ–≥ –∞—Ç–∞–∫—É—î –æ–¥–∏–Ω —Ä–∞–∑
                    is_hit, is_crit, damage = combat_calculator.perform_single_attack(
                        enemy_stats, player_stats
                    )

                    if is_hit:
                        character.take_damage(damage)
                        character_repo.save(character)
                        session.commit()

                        crit_text = "üí• –ö–†–ò–¢–ò–ß–ù–ò–ô –£–î–ê–†! " if is_crit else ""
                        await message.answer(
                            f"‚ùå <b>–í—Ç–µ—á–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—å!</b>\n\n"
                            f"–í–æ—Ä–æ–≥ –≤—Å—Ç–∏–≥ –≤–∞—Å –≤–¥–∞—Ä–∏—Ç–∏:\n"
                            f"{crit_text}–£—Ä–æ–Ω: {damage}\n\n"
                            f"‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤'—è: {character.current_health}\n\n"
                            f"–ü—Ä–æ–¥–æ–≤–∂—É–π—Ç–µ –±–∏—Ç–∏—Å—å: /attack",
                            parse_mode="HTML"
                        )
                    else:
                        await message.answer(
                            "‚ùå –í—Ç–µ—á–∞ –Ω–µ –≤–¥–∞–ª–∞—Å—å, –∞–ª–µ –≤–æ—Ä–æ–≥ –ø—Ä–æ–º–∞—Ö–Ω—É–≤—Å—è!\n\n"
                            "–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑: /flee –∞–±–æ –∞—Ç–∞–∫—É–π—Ç–µ: /attack"
                        )

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ cmd_flee: {e}", exc_info=True)
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@router.message()
async def handle_text(message: Message):
    """–û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."""
    if not message.from_user:
        logger.warning("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ handle_text.")
        return

    if not message.text:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è –¥–ª—è –≤–∞—à–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        return

    user_id = message.from_user.id
    character_name = message.text.strip()

    with get_session() as session:
        character_repo = PostgresCharacterRepository(session)
        existing = character_repo.get_by_telegram_user_id(user_id)

        if existing:
            await message.answer(
                "–í–∏ –≤–∂–µ –º–∞—î—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥."
            )
            return

        try:
            use_case = CreateCharacterUseCase(character_repo)
            request = CreateCharacterRequest(
                telegram_user_id=user_id,
                character_name=character_name
            )
            response = use_case.execute(request)
            session.commit()

            await message.answer(
                f"‚úÖ {response.message}\n\n"
                f"üë§ –Ü–º'—è: {response.character_name}\n"
                f"‚≠êÔ∏è –†—ñ–≤–µ–Ω—å: {response.level}\n\n"
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.\n"
                f"–ü–æ—á–Ω—ñ—Ç—å —Å–≤–æ—î –ø—Ä–∏–≥–æ–¥—É –∑ /explore!"
            )
        except ValueError as e:
            await message.answer(f"‚ùå {str(e)}")
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}", exc_info=True)
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
