import logging
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from infrastructure.persistence.database import get_session
from infrastructure.persistence.repositories.postgres_character_repository import PostgresCharacterRepository
from domain.services.stats_calculator import StatsCalculator
from application.use_cases.character import CreateCharacterUseCase, GetCharacterStatsUseCase
from application.dto.character_dto import CreateCharacterRequest, GetCharacterStatsRequest
from infrastructure.persistence.repositories.json_item_repository import JsonItemRepository

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logger = logging.getLogger(__name__)

# –°—Ç–≤–æ—Ä—é—î–º–æ —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
router = Router()

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
user_states = {}

from application.use_cases.events.generate_event_use_case import GenerateEventUseCase, GenerateEventRequest
from application.use_cases.combat.start_combat import StartCombatUseCase, StartCombatRequest
from application.use_cases.combat.perform_attack_use_case import PerformAttackUseCase, PerformAttackRequest
from domain.services.event_generator import EventGenerator
from infrastructure.persistence.repositories.json_enemy_repository import JsonEnemyRepository
from domain.services.combat_calculator import CombatCalculator
from domain.services.loot_generator import LootGenerator

# ... (—ñ—Å–Ω—É—é—á—ñ —ñ–º–ø–æ—Ä—Ç–∏)

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –Ω–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è —ñ–º–µ–Ω—ñ, –∞–ª–µ —ñ –¥–ª—è –±–æ—é
user_states = {}

from aiogram.types import CallbackQuery
from presentation.telegram.keyboards import get_combat_keyboard

# ... (—ñ—Å–Ω—É—é—á—ñ —ñ–º–ø–æ—Ä—Ç–∏)

# === –Ü–≥—Ä–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ ===

@router.message(Command("explore"))
async def cmd_explore(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /explore - –¥–æ—Å–ª—ñ–¥–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    try:
        with get_session() as session:
            char_repo = PostgresCharacterRepository(session)
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –≤ –±–æ—é
            character = char_repo.get_by_telegram_user_id(user_id)
            if character and character.combat_state:
                await message.answer("–í–∏ –≤–∂–µ –≤ –±–æ—é! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –Ω–∏–∂—á–µ.", reply_markup=get_combat_keyboard())
                return

            event_generator = EventGenerator()
            use_case = GenerateEventUseCase(char_repo, event_generator)
            # ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –Ω–∞—à—ñ–π —Å–∏—Å—Ç–µ–º—ñ - —Ü–µ telegram_user_id
            request = GenerateEventRequest(character_id=str(user_id))
            response = use_case.execute(request)

            await message.answer(f"–ü–æ–¥—ñ—è: {response.description}")

            if response.event_type == 'combat':
                user_states[user_id] = 'in_combat'
                item_repo = JsonItemRepository(data_path="data")
                enemy_repo = JsonEnemyRepository(data_path="data")
                stats_calculator = StatsCalculator(item_repo)
                start_combat_uc = StartCombatUseCase(char_repo, enemy_repo, stats_calculator)
                
                start_req = StartCombatRequest(character_id=str(user_id))
                start_res = start_combat_uc.execute(start_req)
                session.commit()
                await message.answer(start_res.message, reply_markup=get_combat_keyboard())

    except ValueError as e:
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ /explore –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞.")

@router.callback_query(lambda c: c.data and c.data.startswith('attack:'))
async def process_attack_callback(callback_query: CallbackQuery):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∞—Ç–∞–∫–∏."""
    user_id = callback_query.from_user.id
    if user_states.get(user_id) != 'in_combat':
        await callback_query.answer("–í–∏ –Ω–µ –≤ –±–æ—é.", show_alert=True)
        return

    try:
        num_attacks = int(callback_query.data.split(':')[1])
    except (ValueError, IndexError):
        await callback_query.answer("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∞—Ç–∞–∫–∏.")
        return

    try:
        with get_session() as session:
            char_repo = PostgresCharacterRepository(session)
            item_repo = JsonItemRepository(data_path="data")
            enemy_repo = JsonEnemyRepository(data_path="data")
            stats_calculator = StatsCalculator(item_repo)
            combat_calculator = CombatCalculator()
            loot_generator = LootGenerator()

            use_case = PerformAttackUseCase(
                char_repo, enemy_repo, stats_calculator, combat_calculator, loot_generator
            )
            request = PerformAttackRequest(character_id=str(user_id), number_of_attacks=num_attacks)
            response = use_case.execute(request)
            session.commit()

            result_message = ""
            for attack in response.player_attacks:
                result_message += f"–í–∏ –∞—Ç–∞–∫—É–≤–∞–ª–∏: {'–ü–æ–ø–∞–¥–∞–Ω–Ω—è' if attack.is_hit else '–ü—Ä–æ–º–∞—Ö'}, —à–∫–æ–¥–∞: {attack.damage}\n"
            for attack in response.enemy_attacks:
                result_message += f"–í–æ—Ä–æ–≥ –∞—Ç–∞–∫—É–≤–∞–≤: {'–ü–æ–ø–∞–¥–∞–Ω–Ω—è' if attack.is_hit else '–ü—Ä–æ–º–∞—Ö'}, —à–∫–æ–¥–∞: {attack.damage}\n"
            
            result_message += f"\n{response.message}"

            if response.combat_ended:
                user_states.pop(user_id, None)
                if response.rewards:
                    result_message += f"\n–î–æ—Å–≤—ñ–¥: +{response.rewards.experience_gained}, –ó–æ–ª–æ—Ç–æ: +{response.rewards.gold_gained}"
                # –í–∏–¥–∞–ª—è—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –ø—ñ—Å–ª—è –±–æ—é
                await callback_query.message.edit_reply_markup(reply_markup=None)
            
            await callback_query.answer() # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ "–≥–æ–¥–∏–Ω–Ω–∏–∫" –Ω–∞ –∫–Ω–æ–ø—Ü—ñ
            await callback_query.message.answer(result_message, reply_markup=get_combat_keyboard() if not response.combat_ended else None)

    except ValueError as e:
        await callback_query.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}", show_alert=True)
        user_states.pop(user_id, None)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤ callback_attack –¥–ª—è user_id={user_id}: {e}", exc_info=True)
        await callback_query.answer("–°—Ç–∞–ª–∞—Å—è –Ω–µ–ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞.", show_alert=True)
        user_states.pop(user_id, None)
@router.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ—á–∞—Ç–æ–∫ –≥—Ä–∏"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    try:
        with get_session() as session:
            repo = PostgresCharacterRepository(session)
            existing = repo.get_by_telegram_user_id(user_id)

            if existing:
                await message.answer(
                    f"üéÆ –í—ñ—Ç–∞—é, {existing.name}!\n\n"
                    f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.\n"
                    f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stats —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."
                )
                return
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É—é—á–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        # –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ, —â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –º—ñ–≥ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —è–∫—â–æ –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
        pass


    # –Ø–∫—â–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ–º–∞—î - –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —ñ–º'—è
    user_states[user_id] = "awaiting_name"
    await message.answer(
        "üéÆ –í—ñ—Ç–∞—î–º–æ –≤ RPG!\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∞—à–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (3-20 —Å–∏–º–≤–æ–ª—ñ–≤):"
    )

@router.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    try:
        with get_session() as session:
            char_repo = PostgresCharacterRepository(session)
            item_repo = JsonItemRepository(data_path="data")
            calculator = StatsCalculator(item_repo)

            use_case = GetCharacterStatsUseCase(char_repo, calculator)
            request = GetCharacterStatsRequest(telegram_user_id=user_id)
            response = use_case.execute(request)

            stats = response.stats

            stats_text = (
                f"üë§ **{response.name}** (–†—ñ–≤–µ–Ω—å {response.level})\n"
                f"üìä –î–æ—Å–≤—ñ–¥: {response.experience}/{response.experience_to_next_level}\n\n"

                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {stats.health}/{stats.max_health}\n"
                f"üíô –ú–∞–Ω–∞: {stats.mana}/{stats.max_mana}\n\n"

                f"‚öîÔ∏è **–ê—Ç–∞–∫–∞:**\n"
                f"‚Ä¢ –£—Ä–æ–Ω: {stats.damage_min}-{stats.damage_max}\n"
                f"‚Ä¢ –¢–æ—á–Ω—ñ—Å—Ç—å: {stats.accuracy}\n"
                f"‚Ä¢ –ö—Ä–∏—Ç. —à–∞–Ω—Å: {stats.critical_chance:.1f}%\n"
                f"‚Ä¢ –ö—Ä–∏—Ç. –º–Ω–æ–∂–Ω–∏–∫: {stats.critical_multiplier:.1f}x\n"
                f"‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å –∞—Ç–∞–∫–∏: {stats.attack_speed:.2f}\n\n"

                f"üõ°Ô∏è **–ó–∞—Ö–∏—Å—Ç:**\n"
                f"‚Ä¢ –ë—Ä–æ–Ω—è: {stats.armor}\n"
                f"‚Ä¢ –£—Ö–∏–ª–µ–Ω–Ω—è: {stats.evasion}\n"
                f"‚Ä¢ –ï–Ω–µ—Ä–≥. —â–∏—Ç: {stats.energy_shield}\n\n"

                f"üìà **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
                f"‚Ä¢ –°–∏–ª–∞: {stats.strength}\n"
                f"‚Ä¢ –°–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å: {stats.dexterity}\n"
                f"‚Ä¢ –Ü–Ω—Ç–µ–ª–µ–∫—Ç: {stats.intelligence}\n\n"

                f"üìç –õ–æ–∫–∞—Ü—ñ—è: {response.location}"
            )

            await message.answer(stats_text, parse_mode="Markdown")

    except ValueError as e:
        logger.warning(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è user_id={user_id}: {e}")
        await message.answer(
            "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
        )
    except Exception as e:
        logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ cmd_stats –¥–ª—è user_id={user_id}: {e}")
        await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")


@router.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –¥–æ–ø–æ–º–æ–≥–∞"""
    help_text = (
        "üéÆ **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n\n"
        "/start - –ü–æ—á–∞—Ç–∏ –≥—Ä—É / –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        "üöß –í —Ä–æ–∑—Ä–æ–±—Ü—ñ:\n"
        "‚Ä¢ /explore - –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ–π\n"
        "‚Ä¢ /attack - –ê—Ç–∞–∫–∞ –≤ –±–æ—é\n"
        "‚Ä¢ /inventory - –Ü–Ω–≤–µ–Ω—Ç–∞—Ä —Ç–∞ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∞"
    )

    await message.answer(help_text, parse_mode="Markdown")

# === –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ===

@router.message()
async def handle_message(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
    if user_states.get(user_id) == "awaiting_name":
        if not message.text:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–µ–∫—Å—Ç–æ–º.")
            return
        character_name = message.text.strip()

        try:
            with get_session() as session:
                repo = PostgresCharacterRepository(session)
                use_case = CreateCharacterUseCase(repo)

                request = CreateCharacterRequest(
                    telegram_user_id=user_id,
                    character_name=character_name
                )

                response = use_case.execute(request)
                session.commit()

                # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
                user_states.pop(user_id, None)

                await message.answer(
                    f"‚úÖ {response.message}\n\n"
                    f"üéâ –†—ñ–≤–µ–Ω—å: {response.level}\n"
                    f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stats —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
                )

        except ValueError as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
        except Exception as e:
            logger.error(f"–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –¥–ª—è user_id={user_id}: {e}")
            await message.answer("‚ùå –°—Ç–∞–ª–∞—Å—è –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
    else:
        await message.answer(
            "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É –∞–±–æ /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏."
        )