import asyncio
import logging
import os
from aiogram import Bot, Dispatcher

from infrastructure.persistence.database import create_tables
from presentation.telegram.handlers import router

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    bot_token = os.getenv("BOT_TOKEN")
    if not bot_token:
        logger.critical("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")
        return

    bot = Bot(token=bot_token)
    dp = Dispatcher()

    # –†–µ—î—Å—Ç—Ä—É—î–º–æ —Ä–æ—É—Ç–µ—Ä –∑ –æ–±—Ä–æ–±–Ω–∏–∫–∞–º–∏
    dp.include_router(router)

    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
    try:
        create_tables()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞")
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—å: {e}")
        logger.error("–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –∑–∞–ø—É—â–µ–Ω–æ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ PostgreSQL —Ç–∞ —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤ .env")
        return

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
