import logging
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
import os

from infrastructure.persistence.database import get_session
from infrastructure.persistence.repositories.postgres_character_repository import PostgresCharacterRepository
from domain.services.stats_calculator import StatsCalculator
from application.use_cases.character import CreateCharacterUseCase, GetCharacterStatsUseCase
from application.dto.character_dto import CreateCharacterRequest, GetCharacterStatsRequest

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ –∑–º—ñ–Ω–Ω–∏—Ö –æ—Ç–æ—á–µ–Ω–Ω—è!")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
user_states = {}

# === –ö–æ–º–∞–Ω–¥–∏ ===

@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ—á–∞—Ç–æ–∫ –≥—Ä–∏"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –≤–∂–µ –ø–µ—Ä—Å–æ–Ω–∞–∂
    with get_session() as session:
        repo = PostgresCharacterRepository(session)
        existing = repo.get_by_telegram_user_id(user_id)

        if existing:
            await message.answer(
                f"üéÆ –í—ñ—Ç–∞—é, {existing.name}!\n\n"
                f"–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–∂ –≤–∂–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.\n"
                f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stats —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏."
            )
            return

    # –Ø–∫—â–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –Ω–µ–º–∞—î - –ø—Ä–æ—Å–∏–º–æ –≤–≤–µ—Å—Ç–∏ —ñ–º'—è
    user_states[user_id] = "awaiting_name"
    await message.answer(
        "üéÆ –í—ñ—Ç–∞—î–º–æ –≤ RPG!\n\n"
        "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≤–∞—à–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (3-20 —Å–∏–º–≤–æ–ª—ñ–≤):"
    )

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /stats - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    try:
        with get_session() as session:
            repo = PostgresCharacterRepository(session)
            calculator = StatsCalculator()

            use_case = GetCharacterStatsUseCase(repo, calculator)
            request = GetCharacterStatsRequest(telegram_user_id=user_id)
            response = use_case.execute(request)

            stats = response.stats

            stats_text = (
                f"üë§ **{response.name}** (–†—ñ–≤–µ–Ω—å {response.level})\n"
                f"üìä –î–æ—Å–≤—ñ–¥: {response.experience}/{response.experience_to_next_level}\n\n"

                f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è: {stats.health}/{stats.max_health}\n"
                f"üíô –ú–∞–Ω–∞: {stats.mana}/{stats.max_mana}\n\n"

                f"‚öîÔ∏è **–ê—Ç–∞–∫–∞:**\n"
                f"‚Ä¢ –£—Ä–æ–Ω: {stats.damage_min}-{stats.damage_max}\n"
                f"‚Ä¢ –¢–æ—á–Ω—ñ—Å—Ç—å: {stats.accuracy}\n"
                f"‚Ä¢ –ö—Ä–∏—Ç. —à–∞–Ω—Å: {stats.critical_chance:.1f}%\n"
                f"‚Ä¢ –ö—Ä–∏—Ç. –º–Ω–æ–∂–Ω–∏–∫: {stats.critical_multiplier:.1f}x\n"
                f"‚Ä¢ –®–≤–∏–¥–∫—ñ—Å—Ç—å –∞—Ç–∞–∫–∏: {stats.attack_speed:.2f}\n\n"

                f"üõ°Ô∏è **–ó–∞—Ö–∏—Å—Ç:**\n"
                f"‚Ä¢ –ë—Ä–æ–Ω—è: {stats.armor}\n"
                f"‚Ä¢ –£—Ö–∏–ª–µ–Ω–Ω—è: {stats.evasion}\n"
                f"‚Ä¢ –ï–Ω–µ—Ä–≥. —â–∏—Ç: {stats.energy_shield}\n\n"

                f"üìà **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n"
                f"‚Ä¢ –°–∏–ª–∞: {stats.strength}\n"
                f"‚Ä¢ –°–ø—Ä–∏—Ç–Ω—ñ—Å—Ç—å: {stats.dexterity}\n"
                f"‚Ä¢ –Ü–Ω—Ç–µ–ª–µ–∫—Ç: {stats.intelligence}\n\n"

                f"üìç –õ–æ–∫–∞—Ü—ñ—è: {response.location}"
            )

            await message.answer(stats_text, parse_mode="Markdown")

    except ValueError:
        await message.answer(
            "‚ùå –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!\n"
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞."
        )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /help - –¥–æ–ø–æ–º–æ–≥–∞"""
    help_text = (
        "üéÆ **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**\n\n"
        "/start - –ü–æ—á–∞—Ç–∏ –≥—Ä—É / –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/stats - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n\n"
        "üöß –í —Ä–æ–∑—Ä–æ–±—Ü—ñ:\n"
        "‚Ä¢ –î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ª–æ–∫–∞—Ü—ñ–π\n"
        "‚Ä¢ –ë–æ–π–æ–≤–∞ —Å–∏—Å—Ç–µ–º–∞\n"
        "‚Ä¢ –Ü–Ω–≤–µ–Ω—Ç–∞—Ä —Ç–∞ –µ–∫—ñ–ø—ñ—Ä–æ–≤–∫–∞"
    )

    await message.answer(help_text, parse_mode="Markdown")

# === –û–±—Ä–æ–±–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ ===

@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    if not message.from_user:
        return
    user_id = message.from_user.id

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å—Ç–∞–Ω—ñ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
    if user_states.get(user_id) == "awaiting_name":
        if not message.text:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–µ–∫—Å—Ç–æ–º.")
            return
        character_name = message.text.strip()

        try:
            with get_session() as session:
                repo = PostgresCharacterRepository(session)
                use_case = CreateCharacterUseCase(repo)

                request = CreateCharacterRequest(
                    telegram_user_id=user_id,
                    character_name=character_name
                )

                response = use_case.execute(request)
                session.commit()

                # –û—á–∏—â—É—î–º–æ —Å—Ç–∞–Ω
                user_states.pop(user_id, None)

                await message.answer(
                    f"‚úÖ {response.message}\n\n"
                    f"üéâ –†—ñ–≤–µ–Ω—å: {response.level}\n"
                    f"üìä –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /stats —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
                )

        except ValueError as e:
            await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")
    else:
        await message.answer(
            "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /start —â–æ–± –ø–æ—á–∞—Ç–∏ –≥—Ä—É –∞–±–æ /help –¥–ª—è –¥–æ–ø–æ–º–æ–≥–∏"
        )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===

async def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

    # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
    from infrastructure.persistence.database import create_tables
    create_tables()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö –≥–æ—Ç–æ–≤–∞")

    # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
